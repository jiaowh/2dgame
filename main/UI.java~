package main;

import java.awt.Graphics2D;
import java.awt.Font;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;
import java.awt.BasicStroke;
import java.io.InputStream;
import java.io.IOException;
import java.awt.FontFormatException;

import object.Key;
import entity.Player;
import object.Heart;

public class UI{

    GamePanel gp;
    Graphics2D g2;
    Font maruMonica;
    BufferedImage heart_full, heart_half, heart_empty;
    
    public boolean messageOn = false;
    public String message = "";
    int messageCounter = 0;
    public boolean gameFinished = false;
    public String currentDialogue = "";
    public int commandNum = 0;

    double playTime;
    DecimalFormat dFormat = new DecimalFormat("#0.000");
    
    public UI(GamePanel gp){
	this.gp = gp;
	
	try{
	    InputStream is = getClass().getResourceAsStream("/res/font/x12y16pxMaruMonica.ttf");
	    maruMonica = Font.createFont(Font.TRUETYPE_FONT, is);
	}catch(FontFormatException e){e.printStackTrace();
	}catch(IOException e){e.printStackTrace();}

	Heart heart = new Heart();
	heart_full = heart.image;
	heart_half = heart.image2;
	heart_empty = heart.image3;
			
    }

    public void showMessage(String text){
	message = text;
	messageOn = true;
    }
    
    public void draw(Graphics2D g2){
	this.g2 = g2;
	g2.setFont(maruMonica);
	g2.setColor(Color.white);
	g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 60F));

	if(gp.gameState == gp.titleState){
	    drawTitleScreen();
	    
	}
	if(gp.gameState == gp.playState){
	    drawPlayerLife();

	}
	if(gp.gameState == gp.pauseState){
	     drawPlayerLife();
	    drawPauseScreen();
	}
	if(gp.gameState == gp.dialogueState){
	     drawPlayerLife();
	    drawDialogueScreen();
	}
	if(gp.gameState == gp.statusState){
        
	    drawStatusScreen();
	 
	}
	
    }

    public void drawPlayerLife(){
	int x = gp.tileSize/2;
	int y = gp.tileSize/2;
	int i = 0;
	while(i < gp.player.maxLife/2){
	    g2.drawImage(heart_empty,x,y,gp.tileSize, gp.tileSize, null);
	    i++;
	    x+=gp.tileSize+2;
	}
	x = gp.tileSize/2;
        i = 0;
	while(i<gp.player.life){
	    g2.drawImage(heart_half, x, y, gp.tileSize, gp.tileSize, null);
	    i++;
	    if(i<gp.player.life){
		g2.drawImage(heart_full, x, y, gp.tileSize, gp.tileSize, null);
	    }
	    i++;
	    x += gp.tileSize+2;
	}
	

    }

    public void drawTitleScreen(){

	g2.setColor(Color.black);
	g2.fillRect(0, 0, gp.screenWidth, gp.screenHeight);
	g2.setFont(g2.getFont().deriveFont(Font.BOLD, 96F));
	String text = "ミニリュウ（笑）";
	int length = (int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
	int x = gp.screenWidth/2 - length/2;
	int y = gp.tileSize*3;
	g2.setColor(Color.gray);
	g2.drawString(text, x+5, y+5);
	g2.setColor(Color.white);
	g2.drawString(text, x, y);

	x = gp.screenWidth/2 - gp.tileSize;
	y += gp.tileSize*2;
	g2.drawImage(gp.player.down2, x, y, gp.tileSize*2, gp.tileSize*2, null);

	g2.setFont(g2.getFont().deriveFont(Font.BOLD, 48F));
	text = "START GAME";
	length = (int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
	x = gp.screenWidth/2 - length/2;
	y += gp.tileSize*4;
	g2.drawString(text, x, y);
	if(commandNum == 0){
	    g2.drawString(">", x-gp.tileSize, y);
	}

        text = "LOAD GAME";
        length = (int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
        x = gp.screenWidth/2 - length/2;
        y += gp.tileSize;
	g2.drawString(text, x, y);
	if(commandNum == 1){
	    g2.drawString(">", x-gp.tileSize, y);
	}

	text = "QUIT";
        length = (int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
        x = gp.screenWidth/2 - length/2;
        y += gp.tileSize;
	g2.drawString(text, x, y);
	if(commandNum == 2){
	    g2.drawString(">", x-gp.tileSize, y);
	}
    }
    
    public void drawPauseScreen(){
	String text = "PAUSED";

	int length = (int)g2.getFontMetrics().getStringBounds(text, g2).getWidth();
	int x = gp.screenWidth/2 - length/2;
	int y=gp.screenHeight/2;

	g2.drawString(text, x, y);
    }

    public void drawDialogueScreen(){
	int x = gp.tileSize * 2;
	int y = gp.tileSize/2 ;
	int width = gp.screenWidth - (gp.tileSize*4);
	int height = gp.tileSize * 3;
	
	drawSubWindow(x, y, width, height);

	g2.setFont(g2.getFont().deriveFont(Font.PLAIN, 32F));

	x += gp.tileSize;
	y += gp.tileSize;

	for(String line: currentDialogue.split("\n")){
	    g2.drawString(line, x, y);
	    y+=40;
	}
    }

    public void drawStatusScreen(){
	final int frameX = gp.tileSize*2;
	final int frameY = gp.tileSize;
	final int frameWidth = gp.tileSize*5;
	final int frameHeight = gp.tileSize*5;
	drawSubWindow(frameX, frameY, frameWidth, frameHeight);

	//text
	g2.setColor(Color.white);
	g2.setFont(g2.getFont().deriveFont(32F));

	int textX = frameX+20;
	int textY = frameY+gp.tileSize;
	final int lineHeight = 35;

	g2.drawString("Level", textX, textY);
	textY+=lineHeight;
	g2.drawString("HP", textX, textY);
	textY+=lineHeight;
	g2.drawString("Attack", textX, textY);
	textY+=lineHeight;
	g2.drawString("Defense", textX, textY);
	textY+=lineHeight;
	g2.drawString("Exp", textX, textY);
	textY+=lineHeight;
	g2.drawString("Next LV", textX, textY);
	textY+=lineHeight;

	int tailX = (frameX+frameWidth)-30;
	textY = frameY+gp.tileSize;
	String value;
	value=String.valueOf(gp.player.level);
	g2.drawString(value, tailX, textY);
	textY+=lineHeight;
	value=String.valueOf(gp.player.life + "/" + gp.player.maxLife);
	g2.drawString(value, tailX-24, textY);
	textY+=lineHeight;
	value=String.valueOf(gp.player.atk);
	g2.drawString(value, tailX, textY);
	textY+=lineHeight;
	value=String.valueOf(gp.player.def);
	g2.drawString(value, tailX, textY);
	textY+=lineHeight;
	value=String.valueOf(gp.player.exp);
	g2.drawString(value, tailX, textY);
	textY+=lineHeight;
	value=String.valueOf(gp.player.nextExp);
	g2.drawString(value, tailX, textY);
	textY+=lineHeight;
	

    }

    public void drawSubWindow(int x, int y, int width, int height){

	Color c = new Color(0, 0, 0, 200);
	g2.setColor(c);
	g2.fillRoundRect(x, y, width, height,35, 35 );
	c = new Color(255, 255, 255);
	g2.setColor(c);
	g2.setStroke(new BasicStroke(5));//outline
	g2.drawRoundRect(x+5, y+5, width-10, height-10, 25, 25);

	
    }
}
